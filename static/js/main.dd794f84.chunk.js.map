{"version":3,"sources":["components/Kind1.js","redux/types.js","redux/actions.js","containers/Kind1Container.js","components/Kind2.js","containers/Kind2Container.js","components/List.js","containers/ListContainer.js","App.js","redux/states.js","redux/reducers.js","index.js"],"names":["Kind1","kind1","clickButton","className","map","kind","i","onClick","types","actions","jsonData","type","list","kindname","kinds","refs","count","trueFalse","isShow","Kind1Container","dispatch","useDispatch","useSelector","state","listStates","list_kind1","inputRef","resetCounting","onGetListKind1","buttonStyle","e","target","parentNode","childNodes","forEach","classList","remove","add","uncheckedInput","current","input","checked","useEffect","attributes","nodeValue","Kind2","kind2","name","value","id","ref","htmlFor","Kind2Container","user_chk_kind2","kind2InputRef","useRef","changeSkillList","checkbox","undefined","userchk_skill","slice","indexof","indexOf","push","splice","kind2Calculator","listResult","k","length","chk","onGetListKind2","console","log","error","List","reg","item","title","JSON","stringify","replace","href","url","ListContainer","list_kind2","listCounting","isShowBtnMore","onSetIsShowBtnMore","listData","App","states","listState","reducers","combineReducers","action","filter","store","createStore","composeWithDevTools","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd794f84.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Kind1({ kind1, clickButton }) {\r\n\r\n    \r\n    return (\r\n        <div className=\"kind1\">\r\n            {\r\n                kind1.map((kind, i) => \r\n                    <button \r\n                        key={i} \r\n                        className={\r\n                            i===0 \r\n                            ? \"btn_kind1 on\" // 페이지 최초 실행시 'ALL' 클릭 DEFAULT\r\n                            : \"btn_kind1\"\r\n                        } \r\n                        onClick={clickButton}\r\n                        kind={kind}\r\n                    >\r\n                        {kind}\r\n                    </button>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Kind1;\r\n","const GET_LIST_ALL = 'list/GET_LIST_ALL';\r\nconst GET_LIST_KIND1 = 'list/GET_LIST_KIND1';\r\nconst GET_LIST_KIND2 = 'list/GET_LIST_KIND2';\r\nconst USER_CHK_KIND2 = 'list/USER_CHK_KIND2';\r\nconst GET_INPUT_REF = 'list/GET_INPUT_REF';\r\nconst SET_LIST_COUNTING = 'list/SET_LIST_COUNTING';\r\nconst IS_SHOW_BTN_MORE = 'list/IS_SHOW_BTN_MORE';\r\n\r\nexport const types = {\r\n    GET_LIST_ALL,\r\n    GET_LIST_KIND1,\r\n    GET_LIST_KIND2,\r\n    USER_CHK_KIND2,\r\n    GET_INPUT_REF,\r\n    SET_LIST_COUNTING,\r\n    IS_SHOW_BTN_MORE\r\n}","import {types} from './types'\r\n\r\n// 모든 항목 불러오기\r\nexport const getListAll = (jsonData) => ({\r\n    type:types.GET_LIST_ALL,\r\n    list:jsonData\r\n});\r\n\r\n// KIND1 list\r\nexport const getListKind1 = (kindname) => ({\r\n    type:types.GET_LIST_KIND1,\r\n    kind:kindname\r\n});\r\n\r\n// KIND2 list\r\nexport const getListKind2 = (kinds) => ({\r\n    type:types.GET_LIST_KIND2,\r\n    kinds:kinds\r\n});\r\n\r\n// 화면에서 사용자가 클릭한 스킬 목록 \r\nexport const userChkKind2 = (kinds) => ({\r\n    type:types.USER_CHK_KIND2,\r\n    kinds:kinds\r\n});\r\n\r\n\r\n// kind2 checkbox style 제어를 위해 ref를 모두 가져옴\r\nexport const getInputRef = (refs) => ({\r\n    type:types.GET_INPUT_REF,\r\n    refs:refs\r\n});\r\n\r\n// 몇개까지 보여줄지 셋팅, more버튼 누를때마다 5개씩 추가\r\nexport const setListCounting = (list) => ({\r\n    type:types.SET_LIST_COUNTING,\r\n    count:list\r\n});\r\n\r\n// more 버튼 show / hide\r\nexport const setIsShowBtnMore = (trueFalse) => ({\r\n    type:types.IS_SHOW_BTN_MORE,\r\n    isShow:trueFalse\r\n});\r\n\r\n\r\n\r\n\r\nexport const actions = {\r\n    getListAll,\r\n    getListKind1,\r\n    getListKind2,\r\n    userChkKind2,\r\n    getInputRef,\r\n    setListCounting,\r\n    setIsShowBtnMore,\r\n}","import React, {useEffect, useCallback, useRef} from 'react';\r\nimport Kind1 from '../components/Kind1';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../redux/actions'\r\n\r\n\r\nfunction Kind1Container() {\r\n    const dispatch = useDispatch();\r\n    const { kind1, list_kind1, inputRef } = useSelector(state => state.listStates)\r\n\r\n    const clickButton = (e) => {\r\n        buttonStyle(e);\r\n        uncheckedInput();\r\n        onGetListKind1(e.target.attributes.kind.nodeValue);\r\n        resetCounting();\r\n    }\r\n\r\n    // 보여줄 리스트 개수 초기화\r\n    const resetCounting = () => {\r\n        dispatch(actions.setListCounting(5))\r\n    }\r\n\r\n    // 화면에 띄울 list_kind1 업데이트\r\n    const onGetListKind1 = (kind1) => {\r\n        dispatch(actions.getListKind1(kind1))\r\n    }\r\n\r\n    // kind1 Button on/off style\r\n    const buttonStyle = (e) => {\r\n        e.target.parentNode.childNodes.forEach(e => e.classList.remove('on')) // on 제거\r\n        e.target.classList.add('on') // on 추가\r\n    }\r\n\r\n    // input checkbox 전체 해제\r\n    const uncheckedInput = () => {\r\n        inputRef.current.map(input => input.checked = false)\r\n    }\r\n\r\n    // list_kind1이 바뀌면 list_kind2에도 담아 화면에 최종 리스트 출력\r\n    useEffect(() => {\r\n        dispatch(actions.getListKind2(list_kind1))\r\n    }, [list_kind1]);\r\n\r\n    \r\n    return (\r\n        <Kind1\r\n            kind1={kind1}\r\n            clickButton={clickButton}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Kind1Container;\r\n","import React from 'react';\r\n\r\nfunction Kind2({ kind2, clickButton, inputRef }) {\r\n\r\n    \r\n    return (\r\n        <div className=\"kind2\">\r\n            <ul>\r\n                {\r\n                    kind2.map((kind, i) => \r\n                        <li \r\n                            key={i}\r\n                            onClick={clickButton}\r\n                        >\r\n                            <input \r\n                                type=\"checkbox\" \r\n                                name=\"pf_item[]\" \r\n                                value={kind} \r\n                                id={`pf_${kind}`}\r\n                                ref={e => (inputRef.current[i] = e)}\r\n                            />\r\n                            <label htmlFor={`pf_${kind}`}>\r\n                                <span>{kind}</span>\r\n                            </label>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Kind2;\r\n","import React, {useEffect, useCallback, useRef} from 'react';\r\nimport Kind2 from '../components/Kind2';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../redux/actions'\r\n\r\nfunction Kind2Container() {\r\n    const dispatch = useDispatch();\r\n    const { list_kind1, kind2, user_chk_kind2 } = useSelector(state => state.listStates)\r\n\r\n    const onUserChkKind2 = (e) => dispatch(actions.userChkKind2(e));\r\n    const onGetListKind2 = (e) => dispatch(actions.getListKind2(e));\r\n    const resetCounting = () => dispatch(actions.setListCounting(5));\r\n    const clickButton = (checkbox) => {\r\n        resetCounting();\r\n        changeSkillList(checkbox)\r\n    };\r\n\r\n    // kind1 클릭시 kind2 button active style을 모두 해제하기 위해 store에 등록\r\n    const kind2InputRef = useRef([]);\r\n    const onGetInputRef = (refs) => dispatch(actions.getInputRef(refs));\r\n    useEffect(() => onGetInputRef(kind2InputRef) , [kind2InputRef]);\r\n\r\n    \r\n    /**\r\n     * @name changeSkillList\r\n     * @param {checkbox} \r\n     * @description 유저가 화면에서 체크한 스킬 리스트 store에 등록\r\n     */\r\n    const changeSkillList = (checkbox) => {\r\n        if( checkbox.target.value == undefined ) return;\r\n        const userchk_skill = user_chk_kind2.slice(); // 복사해서 사용\r\n        const indexof = userchk_skill.indexOf(checkbox.target.value); \r\n        \r\n        if( checkbox.target.checked === true && indexof === -1 ) {       // kind선택 했고, 배열안에 없다면\r\n            userchk_skill.push(checkbox.target.value); // 추가\r\n        }else if( checkbox.target.checked === false && indexof !== -1 ){ // kind선택 지웠고, 배열안에 있다면\r\n            userchk_skill.splice( indexof, 1 ); // 제거\r\n        }\r\n        kind2Calculator(userchk_skill);\r\n    }\r\n\r\n\r\n    /**\r\n     * @name kind2Calculator \r\n     * @param {유저가 화면상에 체크한 스킬} userchk_skill \r\n     * @description 화면상에 띄울 리스트인 list_kind2 를 계산\r\n     *              1) 유저가 체크한 스킬에 모두 포함되는지, 각 리스트 모두 체크\r\n     *              2) 중복값 모두 제거\r\n     */\r\n    const kind2Calculator = (userchk_skill) => {\r\n        try{\r\n            let listResult = [];\r\n\r\n            for(let k=0; k<list_kind1.length; k++){\r\n                let chk = false; // chk => 2) 중복값 모두 제거 \r\n                for(let i=0; i<userchk_skill.length; i++){\r\n                    if(list_kind1[k].kind2.indexOf(userchk_skill[i]) !== -1){\r\n                        chk = true;\r\n                    }else{\r\n                        chk = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if( chk === true ) listResult.push(list_kind1[k]) // 중복 아니면 push\r\n            }\r\n            \r\n            onUserChkKind2(userchk_skill);\r\n            onGetListKind2(listResult);\r\n            console.log(\"🚀 ~ file: kind2Container.js ~ line 69 ~ kind2Calculator ~ listResult\", listResult)\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Kind2\r\n            kind2={kind2}\r\n            clickButton={clickButton}\r\n            inputRef={kind2InputRef}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Kind2Container;\r\n","import React from 'react';\r\n\r\nfunction List({ list }) {\r\n    const reg = /[\\\"\\[\\]]/g; // 특수 문자 \"[] 3가지 제거\r\n    \r\n    return (\r\n        <div className=\"contents\">\r\n            <ul>\r\n                {\r\n                    list.map((item, i) => \r\n                        <li key={i}>\r\n                            <div className=\"cpl_wrap\">\r\n                                <div className=\"cpl_info\">\r\n                                    <div className=\"cpli_title\">\r\n                                        <strong>{item.title}</strong>\r\n                                        <span>{item.kind1}</span>\r\n                                    </div>\r\n                                    <ul>\r\n                                        <li>\r\n                                            <strong><mark>SKILL</mark></strong>\r\n                                            <span>\r\n                                                { !item.kind2\r\n                                                    ? ''\r\n                                                    : JSON.stringify(item.kind2).replace(reg, '')\r\n                                                }\r\n                                            </span>\r\n                                        </li>\r\n                                        <li>\r\n                                            <strong><mark>URL</mark></strong>\r\n                                            <span><a href={item.url} target=\"_blank\">{item.url}</a></span>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"cpl_pic\">\r\n                                    <div className=\"cplp_info\">\r\n                                        <a href={item.url} target=\"_blank\"><span className=\"blind\">MORE</span></a>\r\n                                        <strong>VIEW</strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;\r\n","import React, {useEffect, useCallback} from 'react';\r\nimport List from '../components/List'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../redux/actions'\r\nimport listData from \"../json/list.json\";\r\n\r\n\r\nfunction ListContainer() {\r\n    const dispatch = useDispatch();\r\n\r\n    const { list_kind2, listCounting, isShowBtnMore } = useSelector(state => state.listStates)\r\n\r\n    const onGetListAll = () => dispatch(actions.getListAll(listData))\r\n    const onGetListKind1 = (kind) => dispatch(actions.getListKind1(kind))\r\n    const onGetListKind2 = () => dispatch(actions.getListKind2(listData))\r\n    const onSetIsShowBtnMore = (trueFalse) => dispatch(actions.setIsShowBtnMore(trueFalse))\r\n    const onSetListCounting = (count) => dispatch(actions.setListCounting(count))\r\n\r\n\r\n    // 최초 실행 시 list 박스 3개 배열에 모두 담기\r\n    useEffect(() => {\r\n        onGetListAll();\r\n        onGetListKind1('ALL');\r\n        onGetListKind2();\r\n    }, []);\r\n\r\n/*\r\n    useEffect(() => {\r\n        console.log(\"🚀 ~ file: ListContainer.js ~ line 37 ~ ListContainer ~ list\", list)\r\n        console.log(\"🚀 ~ file: ListContainer.js ~ line 38 ~ ListContainer ~ list_kind1\", list_kind1)\r\n        console.log(\"🚀 ~ file: ListContainer.js ~ line 39 ~ ListContainer ~ list_kind2\", list_kind2)\r\n    }, [list, list_kind1, list_kind2 ]);\r\n*/\r\n\r\n    const clickMore = () => {\r\n        const addCount = listCounting + 5;\r\n        onSetListCounting(addCount);\r\n    }\r\n\r\n    // more 버튼 show / hide\r\n    useEffect(() => {\r\n        if( list_kind2.length < listCounting ){\r\n            onSetIsShowBtnMore(false)\r\n        }else{\r\n            onSetIsShowBtnMore(true)\r\n        }\r\n    }, [list_kind2, listCounting]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <List\r\n                list={list_kind2.slice(0, listCounting)}\r\n            />\r\n\r\n            {\r\n                isShowBtnMore === true &&\r\n                <button \r\n                    className=\"btn_more\" \r\n                    onClick={clickMore}>\r\n                    MORE\r\n                </button>\r\n            }\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListContainer;\r\n","import Kind1Container from './containers/Kind1Container';\r\nimport Kind2Container from './containers/Kind2Container';\r\nimport ListContainer from './containers/ListContainer';\r\nimport './scss/style.scss'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"header\">\r\n                <h1>김대현 포트폴리오</h1>\r\n            </div>\r\n            <div className=\"wrapper\">\r\n                <h2>DEVELOPER</h2>\r\n\r\n                <div className=\"page\">\r\n                    <h3>PORTFOLIO</h3>\r\n                    <Kind1Container />\r\n                    <Kind2Container />\r\n                    <ListContainer />\r\n                </div>\r\n            </div>\r\n            <div className=\"Footer\">\r\n                <div className=\"f_copyright\">\r\n                    @2021 \r\n                    <strong>daehyun</strong>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const listState = {\r\n    list:[],        // LIST ALL\r\n    list_kind1:[],  // LIST ALL, WEB, APP, HYBRID\r\n    list_kind2:[],  // LIST ...ETC skill kinds\r\n    kind1:['ALL', 'WEB', 'APP', 'HYBRID'],\r\n    kind2:['react', 'reactNative', 'redux', 'sass', 'styledComponent'],\r\n    user_chk_kind2:[],\r\n    inputRef:[],\r\n    listCounting:5, // 몇개까지 보여줄지 셋팅, more버튼 누를때마다 5개씩 추가\r\n    isShowBtnMore:true,\r\n}\r\n\r\nexport const states = {\r\n    listState,\r\n    //\r\n}","import {types} from './types'\r\nimport {states} from './states'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst listReducer = (state = states.listState, action) => {\r\n    switch (action.type) {\r\n        case types.GET_LIST_ALL:\r\n            return{\r\n                ...state,\r\n                list:action.list\r\n            };\r\n        case types.GET_LIST_KIND1:\r\n            return{\r\n                ...state,\r\n                list_kind2:[],\r\n                user_chk_kind2:[],\r\n                list_kind1: action.kind === 'ALL' \r\n                        ? state.list\r\n                        : state.list.filter(list=> list.kind1 === action.kind)\r\n            };\r\n        case types.GET_LIST_KIND2:\r\n            return{\r\n                ...state,\r\n                list_kind2: action.kinds\r\n            }\r\n        case types.USER_CHK_KIND2:\r\n            return{\r\n                ...state,\r\n                user_chk_kind2: action.kinds\r\n            }\r\n        case types.GET_INPUT_REF:\r\n            return{\r\n                ...state,\r\n                inputRef: action.refs\r\n            }\r\n        case types.SET_LIST_COUNTING:\r\n            return{\r\n                ...state,\r\n                listCounting: action.count\r\n            }\r\n        case types.IS_SHOW_BTN_MORE:\r\n            return{\r\n                ...state,\r\n                isShowBtnMore: action.isShow\r\n            }\r\n        default:\r\n            return state; // 기본 값 설정. 파라미터가 undefiend인 경우를 대비\r\n    }\r\n}\r\n\r\n\r\nexport const reducers = combineReducers({\r\n    listStates:listReducer,\r\n    //\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { reducers } from './redux/reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(reducers, composeWithDevTools() );\r\nconsole.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}